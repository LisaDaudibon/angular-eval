@use 'sass:math';

// colors 	-----------------------------------------------------------------------/
$msColor1: #f5845e;
$msColor2: #278588;
$msColor3: #4fb18c;
$msColor4: #ffffff;

$msColorDark: #282f33;
$msColorBackground: #1b2022;

$color1: $msColor1;
$color2: $msColor2;
$color3: $msColor3;

$titleColor: $color1;
$textColor: #ffffff;
$linkColor: $color2;
$listColor: $color2;
$fontSize: 2rem;

// fonts 	-----------------------------------------------------------------------/
$fontFamily: 'Source Sans Pro', '-apple-system', 'BlinkMacSystemFont',
  'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Open Sans',
  'Helvetica Neue', 'sans-serif';
$fontFamilyTitle: $fontFamily;

// sizes 	-----------------------------------------------------------------------/
$wrapperSize: 54.4rem;
$wrapperSizeLarge: 112rem;

$desktop: 1500px;
$smallDesktop: 1400px;
$bigTablet: 1024px;
$tablet: 900px;
$bigPhone: 720px;
$phone: 440px;
$smallPhone: 360px;

$easing: cubic-bezier(0.175, 0.885, 0.32, 1.275);

$toggleMenu-size: 6rem;

// mixins ---------------------------------------------------------------------/

@mixin resetList {
  ul,
  li {
    overflow: inherit;
    margin: 0;
    padding: 0;
  }

  ul {
    list-style-type: none;
  }
}

@mixin resetButton {
  appearance: none;
  padding: 0;
  background: none;
  border: 0;
  outline: none;
  cursor: pointer;
  margin: 0;
}

@mixin breakpoint($point: null, $type: down width) {
  @if ($point != null) {
    $whichProp: 'width';

    @if (
      length($type) >
        1 and
        (nth($type, 1) == 'height' or nth($type, 2) == 'height')
    ) {
      $whichProp: 'height';
    }

    @if (length($point) > 1) {
      $maxPoint: nth($point, 2);
      $minPoint: nth($point, 1);

      @if (nth($point, 1) > nth($point, 2)) {
        $maxPoint: nth($point, 1);
        $minPoint: nth($point, 2);
      }

      $finalMinPoint: $minPoint + 1;
      $finalMaxPoint: $maxPoint;

      @if (nth($type, 1) == 'up' or nth($type, 2) == 'up') {
        $finalMinPoint: $minPoint;
        $finalMaxPoint: $maxPoint - 1;
      }

      @media (min-#{$whichProp}: #{$finalMinPoint}) and (max-#{$whichProp}: #{$finalMaxPoint}) {
        @content;
      }
    } @else {
      $finalPoint: $point;
      $finalType: 'max-#{$whichProp}';

      @if (length($type) > 1) {
        @if (nth($type, 1) == 'up' or nth($type, 2) == 'up') {
          $finalPoint: $point + 1;
          $finalType: 'min-#{$whichProp}';
        }
      } @else {
        @if (nth($type, 1) == 'up') {
          $finalPoint: $point + 1;
          $finalType: 'min-#{$whichProp}';
        }
      }

      @media ($finalType: #{$finalPoint}) {
        @content;
      }
    }
  } @else {
    @warn "Unfortunately, value from first parameter : `#{$point}` - is not a valid one. "
                + "Please use valid value.";
  }
}

@function torgb($color) {
  @if ($color != null) {
    @return #{red($color)}, #{green($color)}, #{blue($color)};
  }
}

@function tohsl($color) {
  @if ($color != null) {
    @return #{hue($color)}, #{saturation($color)}, #{lightness($color)};
  }
}

@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

@function torem($value) {
  $remValue: math.div($value, 10px);
  @return strip-unit($remValue);
}

@function autoclamp($min, $max, $minvw: $smallPhone, $maxvw: $smallDesktop) {
  $minVwWidthInRem: torem($minvw);
  $maxVwWidthInRem: torem($maxvw);

  $slope: math.div(($max - $min), ($maxVwWidthInRem - $minVwWidthInRem));
  $yAxis: -$minVwWidthInRem * $slope + $min;

  @return clamp(
    #{$min},
    #{$yAxis} + #{strip-unit($slope * 100) * 1vw},
    #{$max}
  );
}
